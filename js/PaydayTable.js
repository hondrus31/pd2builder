export default class t extends Map{constructor(t=[],s=[],e={}){super();const o=new Map;for(const t of s)o.set(t,t.toUpperCase());this.set("",o);for(const e of t){const t=new Map;for(const e of s)t.set(e,{value:""});this.set(e,t)}this.columnNames=new Map;for(const[t]of this)this.columnNames.set(t,t.toUpperCase());this.tableClass=e.tableClass}compare(t,s){const e=this.get(t),o=this.get(s);for(const[t,s]of e){if(!s)continue;const e=o.get(t);e.value>s.value?e.css="more":e.value<s.value&&(e.css="less"),o.set(t,e)}return this}addRows(t,[...s]){const e=this.get(t);for(const[t,o]of s)e.set(t,{value:o<0?0:o});return this}addColumns(t,[...s]){for(const[e,o]of s)this.get(e).set(t,{value:o<0?0:o});return this}toHTML(){let t=`<table${this.tableClass?` class="${this.tableClass}"`:""}>\n    <thead>\n        <tr>`;for(const[,s]of this.columnNames)t+=`\n            <td>${s}</td>`;t+="\n        </tr>\n    </thead>\n    <tbody>";for(const[s,e]of this.get("")){t+=`\n        <tr>\n            <td>${e}</td>`;for(const[e,o]of this){if(""===e)continue;const n=o.get(s);t+=`\n            <td${n.css?` class=${n.css}`:""}>${n.value}</td>`}t+="\n        </tr>"}return t+="\n    </tbody>\n</table>"}translate(t={}){const s=this.get("");for(const[e,o]of Object.entries(t.rows))s.has(e)&&s.set(e,o);for(const[s,e]of Object.entries(t.columns))this.columnNames.has(s)&&this.columnNames.set(s,e);return this}}
