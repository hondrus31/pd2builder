export default class t{constructor(t){this.baseStats=new Map,this.builder=t}get(t){let e=this.getBaseStat(t);const s=this.modifiers.filter(e=>{let s=e.type===t;return e.whitelist&&(s=s&&e.whitelist.includes(this.builder.exp.armor)),e.blacklist&&(s=s&&!e.blacklist.includes(this.builder.exp.armor)),s});for(const t of s){const s=t.arguments?this.getMultiple(...t.arguments):[];e=t.exec(e,...s)}return e}getMultiple(...t){return t.map(t=>this.get(t))}get modifiers(){const t=new Map,e=[],s=new Map;for(const[e,{state:s}]of this.builder.exp.skills){const r=this.builder.dbs.get("skills").get(e);r.state=s,r.stats&&t.set(e,r)}for(const[,e]of t)e.overrides&&t.delete(e.overrides);for(const{stats:s,state:r}of[...t.values()].sort((t,e)=>t.tier-e.tier))s.basic&&e.push(...s.basic),s.ace&&r>1&&e.push(...s.ace);if(this.builder.exp.perkDeck){const t=this.builder.dbs.get("perk_decks").get(this.builder.exp.perkDeck).perks,r=this.builder.dbs.get("perk_cards");for(const e of t){const t=r.get(e);t.stats&&s.set(e,t)}for(const[,t]of s)t.overrides&&s.delete(t.overrides);for(const[,t]of s)e.push(...t.stats)}return e}setBaseStats(t){for(const e in t)this.baseStats.set(e,t[e])}getBaseStat(t){return this.baseStats.get(t)}getBaseStats(...t){return t.map(t=>this.baseStats.get(t))}}
